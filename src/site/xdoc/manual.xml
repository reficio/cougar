<?xml version="1.0" encoding="UTF-8"?>
<!--

    Licensed to the Apache Software Foundation (ASF) under one or more
    contributor license agreements.  See the NOTICE file distributed with
    this work for additional information regarding copyright ownership.
    The ASF licenses this file to You under the Apache License, Version 2.0
    (the "License"); you may not use this file except in compliance with
    the License.  You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

-->

<document xmlns="http://maven.apache.org/XDOC/2.0"
          xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          xsi:schemaLocation="http://maven.apache.org/XDOC/2.0 http://maven.apache.org/xsd/xdoc-2.0.xsd">

    <properties>
        <title>Manual</title>
        <author email="tom.bujok@reficio.org">Tom Bujok</author>
    </properties>

    <head>
        <script type="text/javascript" language="javascript"
                src="http://google-code-prettify.googlecode.com/svn/trunk/src/prettify.js"></script>
        <script type="text/javascript" language="javascript"
                src="http://google-code-prettify.googlecode.com/svn/trunk/src/lang-css.js"></script>
        <script type="text/javascript">
            function addLoadEvent(func) {
            var oldonload = window.onload;
            if (typeof window.onload != 'function') {
            window.onload = func;
            } else {
            window.onload = function() {
            if (oldonload) {
            oldonload();
            }
            func();
            }
            }
            }
            addLoadEvent(prettyPrint);
        </script>
        <style type="text/css">
            /* Pretty printing styles. Used with prettify.js. */

            .str { color: #080; }
            .kwd { color: #008; }
            .com { color: #800; }
            .typ { color: #606; }
            .lit { color: #066; }
            .pun { color: #660; }
            .pln { color: #000; }
            .tag { color: #008; }
            .atn { color: #606; }
            .atv { color: #080; }
            .dec { color: #606; }
            pre.prettyprint { padding: 2px; border: 1px solid #888; }

            @media print {
            .str { color: #060; }
            .kwd { color: #006; font-weight: bold; }
            .com { color: #600; font-style: italic; }
            .typ { color: #404; font-weight: bold; }
            .lit { color: #044; }
            .pun { color: #440; }
            .pln { color: #000; }
            .tag { color: #006; font-weight: bold; }
            .atn { color: #404; }
            .atv { color: #060; }
            }
        </style>

    </head>

    <body>

        <!--<menu ref="parent" />-->
        <!--<menu ref="modules" />-->
        <!--<menu ref="reports" />-->

        <section name="Public API">

            <p>There are three ways to use the public API defined by Turbine</p>

<subsection name="org.reficio.connection.Client">
<pre class="prettyprint lang-java">
    void send(Frame frame) throws StompException;
    Frame receive() throws StompException;
</pre>
</subsection>

            <br/>
            <br/>
            <br/>

<subsection name="org.reficio.connection.Connection">
 <pre class="prettyprint lang-java">
    void send(String destination, FrameDecorator frameDecorator) throws StompException;
    Frame receive() throws StompException;

    String subscribe(String destination);
    String subscribe(String destination, FrameDecorator frameDecorator);
    String subscribe(String id, String destination);
    String subscribe(String id, String destination, FrameDecorator frameDecorator);
    void unsubscribe(String id);
    void unsubscribe(String id, FrameDecorator frameDecorator);

    void begin(String transactionId, FrameDecorator frameDecorator);
    void begin(String transactionId);
    void abort(String transactionId, FrameDecorator frameDecorator);
    void abort(String transactionId);
    void commit(String transactionId, FrameDecorator frameDecorator);
    void commit(String transactionId);
    void ack(String messageId, FrameDecorator frameDecorator);
    void ack(String messageId);
 </pre>
</subsection>

            <br/>
            <br/>
            <br/>

<subsection name="org.reficio.connection.TxConnection">
 <pre class="prettyprint lang-java">
    void send(String destination, FrameDecorator frameDecorator);
    Frame receive();

    String subscribe(String destination);
    String subscribe(String destination, FrameDecorator frameDecorator);
    String subscribe(String id, String destination);
    String subscribe(String id, String destination, FrameDecorator frameDecorator);
    void unsubscribe(String id);
    void unsubscribe(String id, FrameDecorator frameDecorator);

    void commit(FrameDecorator frameDecorator);
    void commit();
    void rollback(FrameDecorator frameDecorator);
    void rollback();

    void setAutoTransactional(boolean transactional);
    boolean getAutoTransactional();
 </pre>
</subsection>

            <br/>
            <br/>
            <br/>

<subsection name="Lifecycle management">
<pre class="prettyprint lang-java">
public interface StompResource {

    void init(String hostname, int port, String username, String password, String encoding);
    void init(String hostname, int port, String username, String password, String encoding, int timeout);
    void close();

    String getHostname();
    String getPassword();
    String getUsername();
    int getPort();
    String getSessionId();
    String getEncoding();
    boolean isInitialized();

}
</pre>
</subsection>



        </section>


    </body>

</document>